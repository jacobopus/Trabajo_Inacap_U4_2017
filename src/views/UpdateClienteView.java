package views;

import config.Config;
import controllers.ClienteController;
import data_models.Client;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * 
 * @author jacobopus
 */
public class UpdateClienteView extends javax.swing.JDialog {    
    private ClientView vP;
    private int modo;
    private Client cliente;
    private ClienteController clientController;  /**
                                                  Es una referencia al Controlador
                                                  que llama a esta ventana.
                                                  Se usa para mantener en el controlador
                                                  la mayor parte de la lógica,
                                                  y no poner en esta vista código
                                                  que interactue directamente con 
                                                  los modelos.
                                                 */
    
    
    /**
     * 
     * @param vP        Es una referencia a la ventana principal de la aplicación.
     *                  Al momento de salir de esta ventana de ingreso o edición,
     *                  a través de ella llamamos al método encargado de refrescar la JTable
     *                  de clientes.
     * @param titulo    el titulo a desplegar en esta ventana
     * @param isModal   
     * @param cliente   referencia al cliente a actualizar, cliente vacio (no null) en caso de nuevo ingreso
     * @param modo      indica si esta ventana se ejecuta en modo nuevo registro o modo edición
     */
    public UpdateClienteView(ClientView vP, String titulo, boolean isModal, Client cliente, int modo) {
        super(vP, titulo, isModal );
        this.cliente = cliente;
        this.vP = vP;
        this.modo = modo;
        initComponents();        
        myInitComponent();         
     }
  

    public Client getCliente() {
        return cliente;
    }    
    public ClienteController getControllerWhoCalls() {
        return clientController;
    }
    public void setCliente(Client cliente) {
        this.cliente = cliente;
    }
    public void setControllerWhoCalls(ClienteController cc) {
        this.clientController = cc;
    }    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombreClienteText = new javax.swing.JTextField();
        mailClienteText = new javax.swing.JTextField();
        cedulaClienteText = new javax.swing.JTextField();
        fonoClienteText = new javax.swing.JTextField();
        ppuClienteText = new javax.swing.JTextField();
        vehiculoCBox = new javax.swing.JComboBox<>();
        cancelarClienteBoton = new javax.swing.JButton();
        grabarClienteBoton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tiuloLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        vehiculoCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AUTOMÓVIL", "CAMIONETA", "FURGÓN", "CAMIÓN" }));

        cancelarClienteBoton.setText("Cancelar");
        cancelarClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarClienteBotonActionPerformed(evt);
            }
        });

        grabarClienteBoton.setText("Grabar");
        grabarClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarClienteBotonActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre");

        jLabel2.setText("Cédula");

        jLabel3.setText("Mail");

        jLabel4.setText("Fono");

        jLabel5.setText("PPU");

        jLabel6.setText("Vehiculo");

        tiuloLabel.setText("jLabel7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tiuloLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(grabarClienteBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelarClienteBoton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ppuClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vehiculoCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mailClienteText)
                            .addComponent(fonoClienteText)
                            .addComponent(cedulaClienteText)
                            .addComponent(nombreClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(tiuloLabel)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cedulaClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mailClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fonoClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ppuClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehiculoCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarClienteBoton)
                    .addComponent(grabarClienteBoton))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarClienteBotonActionPerformed
        this.vP.myInitComponents();
        this.dispose();
    }//GEN-LAST:event_cancelarClienteBotonActionPerformed

    private void grabarClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarClienteBotonActionPerformed
        this.eventGrabar();
    }//GEN-LAST:event_grabarClienteBotonActionPerformed
    
    /**
     * Al momento de presionar el boton grabar, se realizan las validaciones,
     * comprobamos en que modo fue llamada esta vista, MODO_EDIT o MODO_APPEND
     * y según sea, se contacta a travez del controlador al metodo correspondiente
     * que a su vez comunica con el modelo.     * 
     */
    public void eventGrabar() {
        boolean insertSuccess;
        
        this.putTextOnClient(); //Almaceno en las propiedades de this.cliente 
                                //el contenido de los cuadros de texto.
        
        if( this.validaNombre())
        {
            if( this.validaRut())
            {
                if( this.validaMail())
                {
                    if ( this.validaPpu())
                    {   
                        if (this.modo == Config.MODO_APPEND)
                        {
                            insertSuccess = this.clientController.newClientControl_insert(this.cliente);
                            if(insertSuccess)    
                            {
                                JOptionPane.showMessageDialog(null,"Cliente agregado exitosamente");
                                this.resetTexts();
                            }
                        }
                        else
                        {
                           if (this.modo == Config.MODO_EDIT)
                           {
                                insertSuccess = this.clientController.editClientControl_update(this.cliente);
                                if(insertSuccess)    
                                {
                                     JOptionPane.showMessageDialog(null,"Cliente modificado exitosamente");
                                     
                                }
                           }    
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"PPU con formato erroneo.");
                    }
                }
                else
                {
                     JOptionPane.showMessageDialog(null,"Mail con formato erroneo.");  
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Rut invalido.");        
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Nombre no puede estar vacio.");           
        }
    }    
    
    
    //metodos auxiliares     
    
    /**
     * cambia la etiqueta de titulo de la ventana
     * @param txt 
     */
    public void setTitulo(String txt) {
        tiuloLabel.setText( txt );    }
    
    
    
    /**
     * pone los datos del cliente en las cajas de texto
     */
    private void putClientOnText() {
        nombreClienteText.setText(this.cliente.getNombre());
        cedulaClienteText.setText(this.cliente.getCi());
        mailClienteText.setText(this.cliente.getMail());
        fonoClienteText.setText(this.cliente.getFono());
        ppuClienteText.setText(this.cliente.getPpu());
        vehiculoCBox.setSelectedIndex( this.cliente.getTipoVehiculo());
        
    }
    
    /**
     * Pone el contenido de las cajas de texto en las propiedades del cliente
     */
    private void putTextOnClient() {
        this.cliente.setNombre( nombreClienteText.getText() );
        this.cliente.setCi( cedulaClienteText.getText() );
        this.cliente.setMail( mailClienteText.getText() );
        this.cliente.setFono( fonoClienteText.getText() );
        this.cliente.setPpu( ppuClienteText.getText() );
        this.cliente.setTipoVehiculo(vehiculoCBox.getSelectedIndex());
    }
    
    /**
     * Pone en blanco todas las cajas de texto
     */
    private void resetTexts() {
        nombreClienteText.setText("");
        cedulaClienteText.setText("");
        mailClienteText.setText("");
        fonoClienteText.setText("");
        ppuClienteText.setText("");
        vehiculoCBox.setSelectedIndex(0);
    }
    
    
    
    //auxiliares de validación
    private boolean validaNombre() {        
        return (!nombreClienteText.getText().isEmpty());
    }
    
    
   /**
    * Fue dificil programar este validador de rut
    * primero tuve que aprender el algoritmo en qué se basa.
    * 
    * despues de eso fueron arduos 20 minutos de trabajo hasta qué 
    * me funciono.
    * 
    * @return boolean
    */
    private boolean validaRut() {
        boolean success = false;
        String rut = cedulaClienteText.getText();
        char dv;
        int rutAux;
        
        try {
            rut =  rut.toUpperCase();
            rut = rut.replace(".", "");
            rut = rut.replace("-", "");
            rutAux = Integer.parseInt(rut.substring(0, rut.length() - 1));
            dv = rut.charAt(rut.length() - 1);
            int m = 0, s = 1;
            
            for (; rutAux != 0; rutAux /= 10)             
            {
                s = (s + rutAux % 10 * (9 - m++ % 6)) % 11;
            }

            if (dv == (char) (s != 0 ? s + 47 : 75)) 
            {
                success = true;
            }

        } catch (java.lang.NumberFormatException e) {

        } catch (Exception e) {
        }
        cedulaClienteText.setText(rut);
        return success;
       
    }

    
    /**
     * En honor a la verdad, yo no programé la expresión regular que valida al mail.
     * había empezado a programarlo paso a paso, como lo hicé con el rut,
     * pero al buscar información me encotré con la maravilla de las
     * expresiones regulares y decidí usarla, aunque me ha costado mucho
     * entenderla.
     * 
     * código extraido de :
     * https://amatellanes.wordpress.com/2013/05/29/java-validar-direccion-de-correo-electronico-en-java/
     * 
     * Lo correcto, seria encapsular complejidades tales como la validación del rut en una clase,
     * pero, por el momento, prefiero mantener la simplicidad del ejercicio haciendole
     * honor a la regla kiss, Keep It Simple, Stupid.
     * 
     * @return 
     */
    private boolean validaMail() {
        String pattern_email = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
 
        String email = mailClienteText.getText();
        Pattern pattern = Pattern.compile(pattern_email);
 
        Matcher matcher = pattern.matcher(email);
        return matcher.matches() && !email.isEmpty();
    }    
    
    /**
     * Despues de estudiar un rato las expresiones regulares, soy capaz de 
     * componer patrones simples, como el que hice para validar que las patentes
     * esten en formato AANNNN
     * 
     * Fue de gran ayuda el siguiente articulo:
     * 
     * https://www.adictosaltrabajo.com/tutoriales/regexsam/
     * 
     * @return 
     */
    private boolean validaPpu() {
        String pattern_ppu =  "[a-zA-Z]{2}[0-9]{4}";
        Pattern pattern = Pattern.compile(pattern_ppu);
        String patente = ppuClienteText.getText();
        
        Matcher matcher = pattern.matcher(patente);
        
        return matcher.matches() && !patente.isEmpty();
    }
    
    private void myInitComponent(){
        //Según el modo de esta ventana
        //Vaciamos el contenido de las cajas de texto
        //o las llenamos con los datos del cliente seleccionado.
       if(this.modo == Config.MODO_APPEND)
       {
           this.resetTexts();
       }
       else
       {
           this.putClientOnText();
       }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelarClienteBoton;
    private javax.swing.JTextField cedulaClienteText;
    private javax.swing.JTextField fonoClienteText;
    private javax.swing.JButton grabarClienteBoton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField mailClienteText;
    private javax.swing.JTextField nombreClienteText;
    private javax.swing.JTextField ppuClienteText;
    private javax.swing.JLabel tiuloLabel;
    private javax.swing.JComboBox<String> vehiculoCBox;
    // End of variables declaration//GEN-END:variables
}
