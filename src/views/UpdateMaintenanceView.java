/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import config.Config;
import controllers.MaintenanceController;
import data_models.Maintenance;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author jacobopus
 */
public class UpdateMaintenanceView extends javax.swing.JDialog {
    Maintenance manten;
    MaintenanceController mc;
    MaintenanceView mantenViewCaller;
    int modo;
    
    /**
     * Constructor para el MODO_EDIT
     * @param isModal
     * @param m
     * @param titulo 
     */
    public UpdateMaintenanceView( boolean isModal, Maintenance m, String titulo, MaintenanceView mV ) {
        super(new JFrame(), titulo, isModal );
    
        initComponents();
        this.setLocationRelativeTo(this);
        this.manten = m;
        this.modo = Config.MODO_EDIT;   
        this.mantenViewCaller = mV;
        this.myInitcomponents();
        this.setMantenToText( this.manten ); 
        this.tituloLabel.setText(titulo);
        
    }

    /**
     * Constructor para el MODO_APPEND
     * @param isModal
     * @param titulo 
     */
    public UpdateMaintenanceView( boolean isModal, String titulo, MaintenanceView mV ) {
        super(new JFrame(), titulo, isModal );
        initComponents();
        this.setLocationRelativeTo(this);
        this.manten = new Maintenance();
        
        
        this.manten.setFecha(this.getToday());
        this.mantenViewCaller = mV;
        this.modo = Config.MODO_APPEND;
        this.myInitcomponents();
        this.setMantenToText( this.manten );   
        this.tituloLabel.setText(titulo);
        this.resetText();
    }    

    public Maintenance getManten() {
        return manten;
    }

    public MaintenanceController getMaintenanceController() {
        return mc;
    }

    public int getModo() {
        return modo;
    }

    public void setManten(Maintenance manten) {
        this.manten = manten;
    }

    public void setMaintenanceController(MaintenanceController mc) {
        this.mc = mc;
    }

    public void setModo(int modo) {
        this.modo = modo;
    }
      
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fechaDate = new org.jdesktop.swingx.JXDatePicker();
        laborText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maintenanceUpdateVolverBoton = new javax.swing.JButton();
        maintenanceUpdateGrabarBoton = new javax.swing.JButton();
        tituloLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        obsTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        laborText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laborTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha");

        jLabel2.setText("Labor");

        jLabel3.setText("Obs.");

        maintenanceUpdateVolverBoton.setText("Cancelar");
        maintenanceUpdateVolverBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintenanceUpdateVolverBotonActionPerformed(evt);
            }
        });

        maintenanceUpdateGrabarBoton.setText("Grabar");
        maintenanceUpdateGrabarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintenanceUpdateGrabarBotonActionPerformed(evt);
            }
        });

        tituloLabel.setText("jLabel4");

        obsTextArea.setColumns(20);
        obsTextArea.setRows(5);
        jScrollPane1.setViewportView(obsTextArea);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tituloLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(laborText)
                            .addComponent(fechaDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addContainerGap(81, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(maintenanceUpdateGrabarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maintenanceUpdateVolverBoton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(tituloLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fechaDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(laborText, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maintenanceUpdateVolverBoton)
                    .addComponent(maintenanceUpdateGrabarBoton))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void laborTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laborTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_laborTextActionPerformed

    private void maintenanceUpdateGrabarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintenanceUpdateGrabarBotonActionPerformed
        Maintenance m = new Maintenance();
        boolean success = false;
        String msg="";
        
        if ( this.validaFecha())
        {
            if ( this.validaLabor())
            {
                m = extraeMantencion();
                if(this.modo == Config.MODO_APPEND)
                {
                    success = this.mc.newMaintenanceControl_insert( m );
                    if(success)
                    {                        
                        msg = "Mantenci贸n agregada correctamente."; 
                        this.resetText();
                    } 
                    else
                    {
                        JOptionPane.showMessageDialog(null, "La Mantenci贸n no fue agregada correctamente."); 
                    }    
                }
                else
                {
                    success = this.mc.newMaintenanceControl_edit( m );
                    if(success)
                    {
                        msg = "Mantenci贸n actualizada correctamente.";                         
                    } 
                    else
                    {
                        JOptionPane.showMessageDialog(null, "La Mantenci贸n no fue actualizada correctamente."); 
                    } 
                }
            }   
            else
            {
                JOptionPane.showMessageDialog(null, "Labor realizada no puede estar vacia"); 
            }
        }
        else
        {
                 JOptionPane.showMessageDialog(null, "Fecha no valida"); 
        }
        
        
        if (success)
        {
            JOptionPane.showMessageDialog(null, msg);
            this.mantenViewCaller.myInitComponents();
        }
    }//GEN-LAST:event_maintenanceUpdateGrabarBotonActionPerformed

    private void maintenanceUpdateVolverBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintenanceUpdateVolverBotonActionPerformed
        this.dispose();
    }//GEN-LAST:event_maintenanceUpdateVolverBotonActionPerformed

    
    
    public void setLabelTitle(String text) {
        this.tituloLabel.setText(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker fechaDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField laborText;
    private javax.swing.JButton maintenanceUpdateGrabarBoton;
    private javax.swing.JButton maintenanceUpdateVolverBoton;
    private javax.swing.JTextArea obsTextArea;
    private javax.swing.JLabel tituloLabel;
    // End of variables declaration//GEN-END:variables

    public void myInitcomponents() {
         fechaDate.setFormats("dd-MM-yyyy");
         
    }
    
    
    public void resetText() {  
        
        fechaDate.setDate( this.getTodayDate() );
        laborText.setText("");
        obsTextArea.setText("");        
    }
    
    
    /**
     * Lo correcto ser铆a encapsular esta funcionalidad en una clase fecha y
     * programar una colaboraci贸n del tipo 
     * MANTENCION TIENE UNA FECHA
     * pero para efectos de mantener la simplicidad del ejercicio,
     * @return 
     */
    private boolean validaFecha() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String fecha; 
        int[] nDias = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        String[] datosFecha;
        
        if (fechaDate.getDate() == null)
        {
            return false;
        }
        if (formatter.format( fechaDate.getDate() ).isEmpty())
        {
            return false;
        }    
        fecha = formatter.format( fechaDate.getDate() );
        if (fecha.length() != 10)
        {
            return false;
        }
        if(fecha.charAt(2) != '-' || fecha.charAt(5) != '-')
        {
            return false;
        }
        datosFecha = fecha.split("-");
        int dia  = Integer.parseInt(datosFecha[ 0 ]);
        int mes  = Integer.parseInt(datosFecha[ 1 ]);
        int anio = Integer.parseInt(datosFecha[ 2 ]);               
                
        if(dia>=1 && dia <= nDias[mes -1])
        {
        } else {
            return false;
        }    
        if(mes<1 || mes>12)
        {
            return false;            
        }    
        
        if(anio<1900)
        {
            return false;
        }
        
        return true;
    }
    
    private boolean validaLabor() {       
        return !(laborText.getText().isEmpty());
    }
    
    private Maintenance extraeMantencion() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Maintenance m = new Maintenance();
        String fecha;
        
            fecha = formatter.format( fechaDate.getDate() );           
            m.setId(this.manten.getId());
            m.setFecha( fecha );
            m.setLaborRealizada(laborText.getText());
            m.setObservaciones(obsTextArea.getText());
            m.setIdCliente( this.manten.getIdCliente());
            
        return m;
    }
    
    private void setMantenToText(Maintenance m) {
        Date fecha;        
            fecha = this.getTodayDate();
            fechaDate.setDate( fecha );
            laborText.setText( m.getLaborRealizada());
            obsTextArea.setText(m.getObservaciones()); 
    }
    
    private String getToday() {
        Calendar c = Calendar.getInstance();
        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH));
        String annio = Integer.toString(c.get(Calendar.YEAR));
        String fecha = dia +"-"+mes+"-"+annio;
        return fecha;
    }
    
    private Date getTodayDate() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Date fecha;
        
        try {
            fecha = formatter.parse( this.getToday() );
            return fecha;
            
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return new Date();
    }
}
