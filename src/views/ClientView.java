/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import config.Config;
import controllers.ClienteController;
import controllers.MaintenanceController;
import data_models.Client;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jacobopus
 */
public class ClientView extends javax.swing.JFrame {
    private TableRowSorter trsFiltro;
    /**
     * Creates new form MainView
     */
    public ClientView() {
        initComponents();
        this.myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientesTable = new javax.swing.JTable();
        nuevoClienteBoton = new javax.swing.JButton();
        editarClienteBoton = new javax.swing.JButton();
        eliminarClienteBoton = new javax.swing.JButton();
        verClienteBoton = new javax.swing.JButton();
        mantencionesClienteBoton = new javax.swing.JButton();
        filtrarClienteText = new javax.swing.JTextField();
        salirBoton = new javax.swing.JButton();
        campoBuscar = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        clientesMenu = new javax.swing.JMenu();
        nuevoClienteItem = new javax.swing.JMenuItem();
        editarClienteItem = new javax.swing.JMenuItem();
        eliminarClienteItem = new javax.swing.JMenuItem();
        mantencionesClienteItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        consolidadoDeMantenciones = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        clientesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(clientesTable);

        nuevoClienteBoton.setText("Nuevo");
        nuevoClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoClienteBotonActionPerformed(evt);
            }
        });

        editarClienteBoton.setText("Editar");
        editarClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarClienteBotonActionPerformed(evt);
            }
        });

        eliminarClienteBoton.setText("Eliminar");
        eliminarClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarClienteBotonActionPerformed(evt);
            }
        });

        verClienteBoton.setText("Ver");
        verClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verClienteBotonActionPerformed(evt);
            }
        });

        mantencionesClienteBoton.setText("Mantenciones");
        mantencionesClienteBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mantencionesClienteBotonActionPerformed(evt);
            }
        });

        filtrarClienteText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarClienteTextActionPerformed(evt);
            }
        });
        filtrarClienteText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filtrarClienteTextKeyTyped(evt);
            }
        });

        salirBoton.setText("Salir");
        salirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBotonActionPerformed(evt);
            }
        });

        campoBuscar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "NOMBRE", "RUT", "PPU", "VEHICULO" }));
        campoBuscar.setSelectedIndex(1);
        campoBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoBuscarKeyTyped(evt);
            }
        });

        jMenu1.setText("Archivo");

        clientesMenu.setText("Clientes");

        nuevoClienteItem.setText("Nuevo");
        nuevoClienteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoClienteItemActionPerformed(evt);
            }
        });
        clientesMenu.add(nuevoClienteItem);

        editarClienteItem.setText("Editar seleccionado");
        editarClienteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarClienteItemActionPerformed(evt);
            }
        });
        clientesMenu.add(editarClienteItem);

        eliminarClienteItem.setText("eLiminar seleccionado");
        eliminarClienteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarClienteItemActionPerformed(evt);
            }
        });
        clientesMenu.add(eliminarClienteItem);

        mantencionesClienteItem.setText("Ver mantenciones seleccionado");
        mantencionesClienteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mantencionesClienteItemActionPerformed(evt);
            }
        });
        clientesMenu.add(mantencionesClienteItem);

        jMenu1.add(clientesMenu);

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        consolidadoDeMantenciones.setText("Consolidado de mantenciones");
        jMenu2.add(consolidadoDeMantenciones);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");

        jMenuItem2.setText("Acerca de...");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editarClienteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eliminarClienteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verClienteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mantencionesClienteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nuevoClienteBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(campoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(filtrarClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(salirBoton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtrarClienteText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoClienteBoton)
                        .addGap(18, 18, 18)
                        .addComponent(editarClienteBoton)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarClienteBoton)
                        .addGap(18, 18, 18)
                        .addComponent(verClienteBoton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mantencionesClienteBoton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(salirBoton)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtrarClienteTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarClienteTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtrarClienteTextActionPerformed

    private void editarClienteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarClienteItemActionPerformed
        this.invokeNewClient();
    }//GEN-LAST:event_editarClienteItemActionPerformed

    private void salirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBotonActionPerformed
        this.dispose();
    }//GEN-LAST:event_salirBotonActionPerformed

    private void campoBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoBuscarKeyTyped
        

    }//GEN-LAST:event_campoBuscarKeyTyped

    private void filtrarClienteTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtrarClienteTextKeyTyped
         // TODO add your handling code here:
        filtrarClienteText.addKeyListener(new KeyAdapter() {
            public void keyReleased(final KeyEvent e) {
                String cadena = (filtrarClienteText.getText());
                filtrarClienteText.setText(cadena);
                repaint();
                filtro();
            }
        });
        trsFiltro = new TableRowSorter(clientesTable.getModel());
        clientesTable.setRowSorter(trsFiltro);
    }//GEN-LAST:event_filtrarClienteTextKeyTyped

    private void verClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verClienteBotonActionPerformed
        this.invokeVerCliente();
    }//GEN-LAST:event_verClienteBotonActionPerformed

    private void eliminarClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarClienteBotonActionPerformed
        
        this.invokeDeleteCliente();     
        
    }//GEN-LAST:event_eliminarClienteBotonActionPerformed

    private void nuevoClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoClienteBotonActionPerformed
         
        this.invokeNewClient();
        
    }//GEN-LAST:event_nuevoClienteBotonActionPerformed

    private void editarClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarClienteBotonActionPerformed
        this.invokeEditClient();
    }//GEN-LAST:event_editarClienteBotonActionPerformed

    private void mantencionesClienteBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mantencionesClienteBotonActionPerformed
        this.invokeMantencionesControl();
    }//GEN-LAST:event_mantencionesClienteBotonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void nuevoClienteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoClienteItemActionPerformed
        this.invokeNewClient();
    }//GEN-LAST:event_nuevoClienteItemActionPerformed

    private void eliminarClienteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarClienteItemActionPerformed
        this.invokeDeleteCliente(); 
    }//GEN-LAST:event_eliminarClienteItemActionPerformed

    private void mantencionesClienteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mantencionesClienteItemActionPerformed
        this.invokeMantencionesControl();
    }//GEN-LAST:event_mantencionesClienteItemActionPerformed

  
    public void myInitComponents() {
        DefaultTableModel modelo;
        ClienteController cc = new ClienteController( this );
        clientesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        modelo = this.prepareModel( cc );
        this.setTableModel( modelo );
        this.selectFirstTableRow();        
    }
    
    public void selectFirstTableRow() {
        if(this.clientesTable.getModel().getRowCount() > 0)   //Si al menos hay un cliente...
        {    
            this.clientesTable.setRowSelectionInterval(0, 0); //ubicate en la primera fila de la tabla
            campoBuscar.setEnabled(true);
            editarClienteBoton.setEnabled(true);
            editarClienteItem.setEnabled(true);
            eliminarClienteBoton.setEnabled(true);     
            eliminarClienteItem.setEnabled(true);
            filtrarClienteText.setEnabled(true);
            verClienteBoton.setEnabled(true); 
        }
        else
        {           
            campoBuscar.setEnabled(false);
            editarClienteBoton.setEnabled(false);
            editarClienteItem.setEnabled(false);
            eliminarClienteBoton.setEnabled(false);     
            eliminarClienteItem.setEnabled(false);
            filtrarClienteText.setEnabled(false);
            verClienteBoton.setEnabled(false);  
        }    
    }
    
    public DefaultTableModel prepareModel( ClienteController cc) {
        return cc.prepareTModel();
    }
    
    public void setTableModel( DefaultTableModel modelo) {
        this.clientesTable.setModel( modelo );
    }
    
 
    public void filtro() {
        int columnaABuscar = 0;
        
        if (campoBuscar.getSelectedItem().equals("ID")) {
            columnaABuscar = 0;
        }
        if (campoBuscar.getSelectedItem().equals("NOMBRE")) {
            columnaABuscar = 1;
        }
        if (campoBuscar.getSelectedItem().equals("RUT")) {
            columnaABuscar = 4;
        }
        if (campoBuscar.getSelectedItem().equals("PPU")) {
            columnaABuscar = 5;
        }
        if (campoBuscar.getSelectedItem().equals("VEHICULO")) {
            columnaABuscar = 6;
        }
        trsFiltro.setRowFilter(RowFilter.regexFilter(filtrarClienteText.getText().toUpperCase(), columnaABuscar));
        this.selectFirstTableRow();
    }    
    
    public void invokeVerCliente() {
        ClienteController cc = new ClienteController( this );
        Client cliente = extraeCliente();         
        if (cliente != null)
        {    
            cc.showClientControl( cliente );
        }
    }    
    
    public void invokeDeleteCliente() {
        ClienteController cc = new ClienteController( this );
        Client cliente = extraeCliente(); 
        
        if (cliente != null)
        {    
            cc.deleteClientControl(cliente);
            this.myInitComponents(); 
        }    
         
    }
    
    public void invokeNewClient() {
        ClienteController cc = new ClienteController( this );
        
        cc.newClientControl_showWindow();
        
    }
    
    public void invokeEditClient() {
        ClienteController cc = new ClienteController( this );
        Client cliente = extraeCliente();
        
        if (cliente != null)
        {    
            cc.editClientControl_showWindow( cliente );
        }
    }
    
    public void invokeMantencionesControl() {
        MaintenanceController mC = new MaintenanceController();
        Client cliente = extraeCliente();
        
        mC.maintenanceControl_showWindow( cliente );
    }
    
    private Client extraeCliente() {
        Client cliente = null;
        int row = clientesTable.getSelectedRow();
        
        if(row>-1)
        {    
            cliente = new Client();
            cliente.setId(
                Integer.parseInt(
                        clientesTable.getValueAt(row, 
                                                 Config.FIELD_ID).toString()));
            cliente.setNombre(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_NAME).toString());
            cliente.setCi(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_CI).toString());
            cliente.setMail(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_MAIL).toString());
            cliente.setFono(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_FONO).toString());
            cliente.setPpu(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_PPU).toString());
            cliente.setTipoVehiculoFromString(
                clientesTable.getValueAt(row, 
                                         Config.FIELD_CLIENT_TIPO_V).toString());
        }
        
        return cliente;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> campoBuscar;
    private javax.swing.JMenu clientesMenu;
    private javax.swing.JTable clientesTable;
    private javax.swing.JMenu consolidadoDeMantenciones;
    private javax.swing.JButton editarClienteBoton;
    private javax.swing.JMenuItem editarClienteItem;
    private javax.swing.JButton eliminarClienteBoton;
    private javax.swing.JMenuItem eliminarClienteItem;
    private javax.swing.JTextField filtrarClienteText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mantencionesClienteBoton;
    private javax.swing.JMenuItem mantencionesClienteItem;
    private javax.swing.JButton nuevoClienteBoton;
    private javax.swing.JMenuItem nuevoClienteItem;
    private javax.swing.JButton salirBoton;
    private javax.swing.JButton verClienteBoton;
    // End of variables declaration//GEN-END:variables
}
